Formatando números:

Var n1 = 1543.5

n1.toFixed(2)                                                                              // Coloca em duas casas decimais (para colocar em mais ou menos casas troque o numero entre parênteses)
n1.toLocaleString( ‘pt-BR’,{style: ‘currecy’, currency: ‘BRL’} )    // Coloca o R$ na frente do numero (pode trocar entre outras                                                                                                                 moedas)
n1.replace (‘.’, ‘,’)                                                                       // Troca o ponto pela virgula

_____________________________


Operadores:

Tipos de operadores que vamos estudar:

Aritméticos
Atribuição
relacionais
lógicos
ternarios

___________________________


Operadores Aritméticos:
 +    // Somar   
  -   // Subtrair
  *   // Multiplicação 
  /   // divisão
 %    // Resto de uma divisão 
 **   // Potencia do primeiro numero elevado ao segundo

5 + 3   = 8
5 - 3    = 2
5 * 3    = 15
5 / 3    = 1,6
5 % 3  =  2
5 ** 3   = 125

Precedencia dos operadores↓

 ( ) 
 **
 /   *   %
 +  -

Auto Atribuições:  
Forma Simplificada:

var  n = 3                                                                 var n = 3

n = n + 4    // ele vai somar ele mesmo a 4                                  |     n   +=  4 
n = n - 5    //ele vai pegar ele mesmo e subtrair 5                        |     n   -=  2
n = n  * 4   //ele vai pegar ele mesmo e multiplicar por 4              |    n   *=  5
n = n  / 2   //ele vai pegar ele mesmo e dividir por 2                     |    n   /=  2
n = n ** 2  //ele vai pegar ele mesmo e elevar a 2 potência           |    n  **= 2
n = n %  5 //ele vai pegar ele mesmo, dividir por 5 e dar o resto  |    n  %= 5

outra simplificação:

n++     // é a mesma coisa que n = n + 1 ou n += 1
n—     //é a mesma coisa que n = n - 1 ou n -= 1
++n    // ele vai somar antes
—n    // ele vai diminuir antes

____________________________________

Operadores relacionais retorna um valor boleano

>  Maior que..
<  Menor que..
>= Maior ou igual..
<= Menor ou igual..
== igual a..
!= diferente de..

Exemplos:

5 >  2 --> true 
6 <  2 --> false
8 >= 8 --> true
9 <= 7 --> false
5 == 5 --> true
4 != 4 --> false
____________________________________

Operadores lógicos

!  Negação
&& Conjunção
|| Disjunção

Exemplos:

var a = 5 
var b = 8

true && false  = resultado = false

true && false  = resultado = true

false || false = resultado = false

true || false  = resultado = false

true || true   = resultado = true

a > b && b % 2 == 0 --> resultado = false

nota: Quando se tem operadores lógicos, aritméticos e relacionais na mesma expressão seguimos a seguinte ordem:

primeiro: aritméticos --> + - * ** / %

segundo: relacionais --> > < = >= <= !=

Ultimo: Logicos nessa ordem: ! && ||
 
 ____________________________________

Operadores ternário

[ teste ? true : false ]  

 var idade = 19

 var r = idade >= 18 ? 'Maior' : 'Menor'

 resultado = 'Maior'

 _______________________________________

MANIPULANDO DOM POR: MARCA, ID, NAME, CLASS E SELETOR.

EXEMPLOS:  
    <h1>Iniciando com Dom</h1>
    <p>Aqui vai o resultado</p>
    <p>aprendendo a usar <strong>Dom</strong> em Javascript</p>
    <div id="msg">Click em mim</div>
    <script>
       
       var p1 = window.document.getElementsByTagName('p')[0] 
       (Criando a variavel P1 para manipular o elemento com o nome)

       var d = window.document.getElementById('msg')
       (Criando a variavel D para manipular o elemento com o ID)
       d.style.background = 'green'
       d.innerText = 'Estou aguardando'
    </script>
__________________________________________________________________

CRIANDO EVENTOS NO DOM

var a = document.getElementById('area')

    a.addEventListener('click', clicar)
    a.addEventListener('mouseenter', entrar)
    a.addEventListener('mouseout', sair)

    function clicar(){
        a.innerText = "Clicou!"
        a.style.background = 'red'
    }
    function entrar(){
      a.innerText = "Entrou!"
    }
    function sair(){
    a.innerText = 'Saiu!'
    a.style.background = 'green'
    }

    _____________________________________________________________

    CONDIÇÕES EM JAVASCRIPT (if, else, else if, switch case)
     
     condição simples
    if ( condição ){
        true //Executa a mensagem   
__________________________________________________________________

Condição composta
    if ( condição ){
        
    }else{
        

    }
__________________________________________________________________

Condição Aninhada

EXEMPLOS:

var agora = new Date()
var hora = agora.getHours()
console.log(` Agora são exatamente ${hora} horas.`)

if( hora < 12){
    console.log('Bom dia!')

}else if(hora <= 18){
    console.log('Boa tarde!')

}else{
    console.log('Boa noite!')
}

__________________________________________________________________

var idade = 67
console.log(`Você tem ${idade} anos`)

if(idade < 16){
   console.log(' Não vota')

}else if (idade < 18 || idade > 65){
    console.log('Voto opcional')
}else{
    console.log('Voto obrigatório')
}
________________________________________________________________

[Switch case: Obrigatório o uso do Break]

var agora = new Date()
var diaSem = agora.getDay()

/*
    0 = Domingo
    1 = Segundo
    2 = Terça
    3 = Quarta
    4 = Quinta
    5 = Sexta
    6 = Sábado
*/ 
console.log(diaSem)

switch(diaSem){
    case 0:
        console.log('Domingo')
        break
    case 1:
        console.log('Segunda')
        break
    case 2:
        console.log('Terça')
        break
    case 3:
        console.log('Quarta')
        break
    case 4:
        console.log('Quinta')
        break
    case 5:
        console.log('Sexta')
        break
    case 6:
        console.log('Sábado')
        break
    default:
        console.log('[ERRO] Dia inválido')
}
__________________________________________________________________

Modulo (E) 

Repetições em Javascript

Estrutura de repetição com while = teste lógico no inicio: essa condição diz, enquanto(while) c for menor que 6 ele irá mostrar a mensagem:  passo = passo 1, passo 2..até passo 6


while( c <= 6) // teste logico no inicio: essa condição diz, enquanto(while) c for menor ou igual a 6 ele irá mostrar a mensagem:  passo = passo 1, passo 2..até passo 6

var c = 1 
while( c <= 6){

    console.log(`passo ${c}`)
    c++ // c = c + 1
}

Estrutura de repetição com do while: //primeiro ele executa o bloco depois depois verifica se a condição é verdeira e assim continua até encerrar essa condição

var c = 1 
do{ 
    console.log(`passo ${c}`)
    c++
}while(c <= 6) // Teste lógico no final

________________________________________________________________

VARIÁVEIS COMPOSTAS: É uma variavel que contém varios elementos, cada elemento é composto por seu valor e por uma chave de indentificação ( indice[0] )

Exemplos: let num = [5, 8, 4]

Acrescentando valores a um vetor:

let num = [5, 8, 4]

num.[3] = 6 ( comando usado para adicionar apartir do indice, no caso[3] esse vetor não possui indice[3] mas o Javascript entende e inclui para o programador )

ou

num.push(7) = ( comando "metodo" usado para adicionar apartir do ultimo elemento )

num.length ( comando "atributo" usadado para descobrir o tamnho do vetor )


resultado: num = [5, 8, 4, 6, 7]
    
Usando o metodo .sort() ele ordena o vetor de forma crescente

num.sort() = [4, 5, 6, 7, 8]

.indexOf() é utilizado para verificar a posição n valor indicado

Exemplos:
    
let num = [4, 5, 6, 7, 8]
    num.indexOf(5) o indice desse valor é [1]

Usando estrutura de repetição e condição para mostrar o vetor:

let valores = [5,6 ,7 ,7 ,8 ,9 ,10, 13]

for(let pos = 0; pos <= valores.length; pos++)
console.log(`A posição do vetor é ${pos} tem o valor ${valores[pos]}`)

ou

for(let pos in valores)
console.log(`A posição é ${pos} tem o valor ${valores[pos]}`)
valores.sort()

________________________________________________________________________________

Funções em JS:

"São ações executadas assim que são chamadas ou em decorrência de algum evento."

"Uma função pode receber parâmetros e retornar um resultado"

Exemplo prático:

Contém: Chamada, parâmetro, ação, retorno.

function parimpar(n){
    if (n%2 == 0){
        return 'par'
    }else{
        return 'impar'
    }
}
console.log(parimpar(223))

________________________________________________________________________________

function soma(n1=0, n2=0){
    return n1 + n2
}
console.log(soma(15, 7))

________________________________________________________________________________

let v = function(x){
    return x*2
}
console.log(v(5))

________________________________________________________________________________

function fatorial(n){
    let fat = 1
    for( let c = n; c > 1; c--){
        fat *= c
    }
    return fat
}
console.log(fatorial(5))

// 5! 5 x 4 x 3 x 2 x 1 

________________________________________________________________________________

//Fatorial recusirvo

function fatorial(n){
    if(n == 1){
        return 1
    }else{
        return n * fatorial(n-1) 
    }
}
console.log(fatorial(10))

/*
  5! = 5 X 4 X 3 X 2 X 1
  5! = 5! X 4!

  n! = n x (n-1)!
  1! = 1

 */